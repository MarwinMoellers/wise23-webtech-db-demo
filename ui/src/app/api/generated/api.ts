/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Pizza
 */
export interface Pizza {
    /**
     * 
     * @type {string}
     * @memberof Pizza
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Pizza
     */
    'name'?: string;
    /**
     * 
     * @type {Array<Zutat>}
     * @memberof Pizza
     */
    'zutaten'?: Array<Zutat>;
}
/**
 * 
 * @export
 * @interface Zutat
 */
export interface Zutat {
    /**
     * 
     * @type {string}
     * @memberof Zutat
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Zutat
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof Zutat
     */
    'kalorien'?: number;
    /**
     * 
     * @type {string}
     * @memberof Zutat
     */
    'pizzaId'?: string;
}

/**
 * PizzaControllerApi - axios parameter creator
 * @export
 */
export const PizzaControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Pizza} pizza 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPizza: async (pizza: Pizza, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pizza' is not null or undefined
            assertParamExists('createPizza', 'pizza', pizza)
            const localVarPath = `/api/pizza`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pizza, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllPizza: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/pizza`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll: async (name?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/pizza`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PizzaControllerApi - functional programming interface
 * @export
 */
export const PizzaControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PizzaControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Pizza} pizza 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPizza(pizza: Pizza, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pizza>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPizza(pizza, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PizzaControllerApi.createPizza']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAllPizza(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAllPizza(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PizzaControllerApi.deleteAllPizza']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAll(name?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Pizza>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAll(name, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PizzaControllerApi.findAll']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * PizzaControllerApi - factory interface
 * @export
 */
export const PizzaControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PizzaControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {Pizza} pizza 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPizza(pizza: Pizza, options?: any): AxiosPromise<Pizza> {
            return localVarFp.createPizza(pizza, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllPizza(options?: any): AxiosPromise<void> {
            return localVarFp.deleteAllPizza(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll(name?: string, options?: any): AxiosPromise<Array<Pizza>> {
            return localVarFp.findAll(name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PizzaControllerApi - object-oriented interface
 * @export
 * @class PizzaControllerApi
 * @extends {BaseAPI}
 */
export class PizzaControllerApi extends BaseAPI {
    /**
     * 
     * @param {Pizza} pizza 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PizzaControllerApi
     */
    public createPizza(pizza: Pizza, options?: AxiosRequestConfig) {
        return PizzaControllerApiFp(this.configuration).createPizza(pizza, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PizzaControllerApi
     */
    public deleteAllPizza(options?: AxiosRequestConfig) {
        return PizzaControllerApiFp(this.configuration).deleteAllPizza(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PizzaControllerApi
     */
    public findAll(name?: string, options?: AxiosRequestConfig) {
        return PizzaControllerApiFp(this.configuration).findAll(name, options).then((request) => request(this.axios, this.basePath));
    }
}



